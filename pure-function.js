/**
 * 纯函数的定义：
 * 1、对于相同的输入总是会有相同的输出
 * 2、在执行过程中没有语义可观察的副作用（没有明显的函数副作用）
 * 
 * 什么是函数副作用：
 * 在计算机科学中，函数副作用指当调用函数时，除了返回可能的函数值之外，还对主调用函数产生附加的影响。 ——维基百科
 */

let a = 10, b = 20;
function add() {
  return a + b
}

// 此时的add函数是纯函数吗？
/**
 * 答案是否定的，因为当第一次调用add()时得到的结果是30，
 * 假设再重新定义a=20，那么执行add()之后的结果就会发生变化，
 * 不满足纯函数定义的第一点，即：对于相同的输入输出结果总是相同
 * 此处的输入指的是函数的参数，
 */

// 改造成纯函数
function _add(a, b) {
  return a + b
}

// 姓名处理函数，它是一个纯函数吗？
/**
 * 答案也是否定的，
 * 因为console.log()改变了控制台，影响到了函数外的内容
 * 属于有函数副作用，所以它也不是一个纯函数
 */

function processName(firstName, secondName) {
  const fullName = `${firstName}·${secondName}`
  console.log(`I am ${fullName}`)
  return fullName
}

processName('约瑟翰', '庞麦郎')


// 网络请求函数
/**
 * 对于网络请求函数来说，它肯定不是一个纯函数
 * 因为无法保证服务器每次返回的内容都相同
 * 而且最主要的是，请求有可能会抛出异常
 * 对于无法捕捉的Error本身就是一种副作用
 */
async function getData(url) {
  const response = await fetch(url)
  const { data } = response   
  return data
}


// 显示数据流

/**
 * 数据以入参形式传入叫显示输入数据流
 * 数据以返回值形式输出叫显示输出数据流
 */

/**
 * 纯函数：
 * 输入只能够以参数形式传入，
 * 输出只能够以返回值形式传递，
 * 除了入参和返回值之外，不以任何其它形式和外界进行数据交换的函数。
 */
